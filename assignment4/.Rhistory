yDim <- 50
TimeSteps <- 50
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
if(beeMat[i,j]==5){
beeMat[i,j] <- 5
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
xDim <- 50
yDim <- 50
TimeSteps <- 50
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
getwd()
###################################################################
# Cellualar Automata Model of Spillover HB -> Bombus
# P. Alexander Burnham
# June 22, 2018
###################################################################
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Create a matrix of numbers from 0 to 5
# 0 = Empty Space
# 1 = HB Ind.
# 2 = Bombus Ind.
# 3 = HB Col.
# 4 = Bombus Col.
# 5 = Flower
xDim <- 50
yDim <- 50
TimeSteps <- 50
#seperate matrix for (flowers, BBcolonies, HBcoloneies), (HB, BB), (InfectedYes, InfectedNo)
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
name <- rename(t)
png(name)
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
#run ImageMagick
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
cols <- c(
'0' = "white",
'1' = "yellow",
'2' = "orange",
'3' = "black",
'4' = "grey",
'5' = "red"
)
beeVec <-sample(0:5,xDim*yDim,replace=T, prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
buff <- integer(xDim)
buff2 <- integer(xDim+2)
beeMat <- rbind(buff, beeMat, buff)
beeMat <- cbind(buff2, beeMat, buff2)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
for (t in 1:TimeSteps){
for (i in 2:xDim+1){
for (j in 2:yDim+1){
temp1 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1),1,replace=T, prob = c(0.5, 0.5))
if(beeMat[i,j]==1){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 1
}
if(beeMat[i,j]==2){
beeMat[i,j] <- 0
beeMat[i+temp1,j+temp2] <- 2
}
}
}
name <- rename(t)
png(name)
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
}
name <- rename(t)
name
png(name)
library("poweRlaw")
N=c(1, 2, 3, 4, 5, 6)
k=(1:1000)
mat <- matrix(nrow = 1000, ncol = 6)
for(n in 1:6){
for(i in 1:1000){
mat[i, n] <- max(rpldis(n=N[n], xmin=1, alpha=5/2, discrete_max = 1000))
}
}
mat
sort(mat)
mat[order(mat, decreasing=T),]
mat[,order(mat, decreasing=T)]
mat[order(mat, decreasing=T)]
as.data.frame(mat)
matDat <- as.data.frame(mat)
CD.sorted <- apply(matDat, 6, sort, decreasing=T)
matDat <- as.data.frame(mat)
matDat
CD.sorted <- apply(matDat, 6, sort, decreasing=T)
CD.sorted <- apply(matDat, 2, sort, decreasing=T)
CD.sorted
as.matrix(CD.sorted)
mat2 <- as.matrix(CD.sorted)
matplot(mat2)
matplot(mat2, type="o")
matplot(mat2, type="p")
matplot(mat2, type="p", cex=.5)
matplot(mat2, type="l", cex=.5)
matplot(mat2, type="l", cex=1)
matplot(mat2, type="l", cex=1, ,main="K_max by N", xlab = "Rank", ylab="k_max")
legend("bottomleft", inset=0.01, legend=names, col=c(1:6),pch=15:19)
legend("bottomleft", inset=0.01, legend=names, col=c(1:6))
names
legend("bottomleft", inset=0.01, legend=c(1,2,3,4,5,6), col=c(1:6))
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6",), col=c(1:6), pch=15:19)
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=15:19)
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=1)
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=2)
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=10)
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=5)
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=4)
legend("bottomleft", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=15)
legend("topright", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=15)
matplot(mat2, type="l", cex=1, main="K_max by N", xlab = "Rank", ylab="k_max")
legend("topright", inset=0.01, legend=c("1","2","3","4","5","6"), col=c(1:6), pch=15)
matplot(mat2, type="l", cex=1, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
matplot(mat2, type="l", cex=1, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
N=c(1, 10^2, 10^3, 10^4, 10^5, 10^6)
k=(1:1000)
mat <- matrix(nrow = 1000, ncol = 6)
for(n in 1:6){
for(i in 1:1000){
mat[i, n] <- max(rpldis(n=N[n], xmin=1, alpha=5/2, discrete_max = 1000))
}
}
View(mat)
for(i in 1:1000){
vec[i] <- max(rpldis(n=10^6, xmin=1, alpha=5/2, discrete_max = 1000))
}
vec <- vector()
for(i in 1:1000){
vec[i] <- max(rpldis(n=10^6, xmin=1, alpha=5/2, discrete_max = 1000))
}
vec
mat[,1:5]
cbind(mat[,1:5],vec)
mat <- cbind(mat[,1:5],vec)
matDat <- as.data.frame(mat)
CD.sorted <- apply(matDat, 2, sort, decreasing=T)
CD.sorted
write.csv(CD.sorted, "NKsorted.csv")
setwd("~/Documents/GitHub/BurnhamPoCS")
# Read in Data:
mat <- read.csv("NKsorted.csv",
header=TRUE,
stringsAsFactors = FALSE)
mat
matplot(mat2, type="l", cex=1, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
# Read in Data:
mat <- read.csv("NKsorted.csv",
header=TRUE,
stringsAsFactors = FALSE)
mat2 <- as.matrix(mat)
matplot(mat2, type="l", cex=1, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
matplot(mat2, type="l", cex=2, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
mat2 <- as.matrix(mat)
matplot(mat2, type="l", cex=2, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
matplot(mat2, type="l", cex=5, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
matplot(mat2, type="p", cex=1, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
matplot(mat2, type="o", cex=1, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
matplot(mat2, type="o", cex=.2, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
matplot(log10(mat2), type="l", cex=.2, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
matplot(log10(mat2), type="o", cex=.2, main="K_max by N", xlab = "Rank", ylab="k_max", col=c(1:6))
legend("topright", inset=0.01, legend=c("10^1","10^2","10^3","10^4","10^5","10^6"), col=c(1:6), pch=15)
kmeanEst <- colMeans(mat2)
kmeanEst
plot(y=kmeanEst, x=N)
mod5 <-
gamma <- 5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
plot(y=kmeanTher, x=N)
plot(y=log10(kmeanTher), x=log10(N))
plot(y=log10(kmeanEst), x=log10(N))
plot(y=log10(kmeanEst), x=log10(N))
plot(y=log10(kmeanTher), x=log10(N))
mod5 <- lm(log10(kmeanEst)~log10(N))
abline(mod5, col="blue"")
kmeanEst <- colMeans(mat2)
mod5 <- lm(log10(kmeanEst)~log10(N))
plot(y=log10(kmeanEst), x=log10(N))
abline(mod5, col="blue")
plot(y=log10(kmeanEst), x=log10(N))
abline(mod5, col="blue")
gamma <- 5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
mod6 <- lm(log10(kmeanTher)~log10(N))
plot(y=log10(kmeanTher), x=log10(N))
abline(mod6, col="red")
mod5
mod6
par(mfrow=c(2,1))
kmeanEst <- colMeans(mat2)
mod5 <- lm(log10(kmeanEst)~log10(N))
plot(y=log10(kmeanEst), x=log10(N), main="K_max estimate by N", xlab = "log10(mean(k_max))", ylab = "log10(N)")
abline(mod5, col="blue")
gamma <- 5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
mod6 <- lm(log10(kmeanTher)~log10(N))
plot(y=log10(kmeanTher), x=log10(N), main="K_max theoretical by N", xlab = "log10((k_max))", ylab = "log10(N)")
abline(mod6, col="red")
par(mfrow=c(1,2))
kmeanEst <- colMeans(mat2)
mod5 <- lm(log10(kmeanEst)~log10(N))
plot(y=log10(kmeanEst), x=log10(N), main="K_max estimate by N", xlab = "log10(mean(k_max))", ylab = "log10(N)")
abline(mod5, col="blue")
gamma <- 5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
mod6 <- lm(log10(kmeanTher)~log10(N))
plot(y=log10(kmeanTher), x=log10(N), main="K_max theoretical by N", xlab = "log10((k_max))", ylab = "log10(N)")
abline(mod6, col="red")
par(mfrow=c(1,1))
mod5
par(mfrow=c(1,2))
kmeanEst <- colMeans(mat2)
mod5 <- lm(log10(kmeanEst)~log10(N))
plot(y=log10(kmeanEst), x=log10(N), main="K_max estimate by N", xlab = "log10(mean(k_max))", ylab = "log10(N)")
abline(mod5, col="blue")
text(x=1,y=4, "slope = 0.6262")
gamma <- 5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
mod6 <- lm(log10(kmeanTher)~log10(N))
plot(y=log10(kmeanTher), x=log10(N), main="K_max theoretical by N", xlab = "log10((k_max))", ylab = "log10(N)")
abline(mod6, col="red")
text(x=3,y=.3, "slope = -0.3333")
text(x=2,y=4, "slope = 0.6262")
kmeanEst <- colMeans(mat2)
mod5 <- lm(log10(kmeanEst)~log10(N))
plot(y=log10(kmeanEst), x=log10(N), main="K_max estimate by N", xlab = "log10(mean(k_max))", ylab = "log10(N)")
abline(mod5, col="blue")
text(x=2,y=4, "slope = 0.6262")
gamma <- 5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
mod6 <- lm(log10(kmeanTher)~log10(N))
plot(y=log10(kmeanTher), x=log10(N), main="K_max theoretical by N", xlab = "log10((k_max))", ylab = "log10(N)")
abline(mod6, col="red")
text(x=3,y=.3, "slope = -0.3333")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
kmeanEst <- colMeans(mat2)
mod5 <- lm(log10(kmeanEst)~log10(N))
plot(y=log10(kmeanEst), x=log10(N), main="K_max estimate by N", xlab = "log10(mean(k_max))", ylab = "log10(N)")
abline(mod5, col="blue")
text(x=2,y=4, "slope = 0.6262")
gamma <- -5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
mod6 <- lm(log10(kmeanTher)~log10(N))
plot(y=log10(kmeanTher), x=log10(N), main="K_max theoretical by N", xlab = "log10((k_max))", ylab = "log10(N)")
abline(mod6, col="red")
text(x=3,y=.3, "slope = -0.3333")
par(mfrow=c(1,1))
mod6
gamma <- 5/2
kmeanTher <- ((gamma-1)/(gamma-2))*N^((2-gamma)/(gamma-1))
mod6 <- lm(log10(kmeanTher)~log10(N))
plot(y=log10(kmeanTher), x=log10(N), main="K_max theoretical by N", xlab = "log10((k_max))", ylab = "log10(N)")
abline(mod6, col="red")
text(x=3,y=.3, "slope = -0.3333")
# Read in Data:
book <- read.csv("book.csv",
header=TRUE,
stringsAsFactors = FALSE)
setwd("~/Documents/GitHub/BurnhamPoCS/assignment4")
# Read in Data:
book <- read.csv("book.csv",
header=TRUE,
stringsAsFactors = FALSE)
book[book$X41==2]
book[book$X41==2,]
one <- book[book$X41==1,]
length(book$X0)
length(one$X0)
length(one$X0)/length(book$X0)
two <- book[book$X41==2,]
length(two$X0)/length(book$X0)
three <- book[book$X41==3,]
length(three$X0)/length(book$X0)
p=.1285
(2-2p)/(1+(3-3p))*.1697
((2-2*p)/(1+(3-3*p)))*.1697
