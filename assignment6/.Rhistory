# run function
v20 <- forest(N=N, p=.9, L=20, frac=frac)
v20
# run function
v20 <- forest(N=N, p=.9, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
v20vec
#### L=20
# prealocate matrix space
frac <- matrix(ncol = N, nrow = length(p))
# run function
v20 <- forest(N=N, p=p, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
plot(v20vec)
image(v20, asp=1, xaxt='n', yaxt='n', col = c("black", "grey"), ann=FALSE, bty='n')
legend(x=-.35, y=1, legend=c("Tree", "Sheep"), col = c("black", "grey"), pch=15, cex=1)
library(raster)
# params
p <- seq(0, 1, length.out = 100)
N <- 3
# BEGIN FUNCTION ########################################################
forest <- function(N=N, p=p, L=L, frac=frac){
for(j in 1:N){
for(i in 1:length(p)){
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c(p[i], (1-p[i])))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
frac[i,j] <- (max(as.matrix(clump(Rmat, directions=4)), na.rm=T))/L^2
}
}
return(frac)
}
#### L=20
# prealocate matrix space
frac <- matrix(ncol = N, nrow = length(p))
# run function
v20 <- forest(N=N, p=p, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
plot(v20vec)
# params
p <- seq(0, 1, length.out = 100)
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c(p, (1-p)))
# params
p <- .6
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c(p, (1-p)))
mat <- matrix(nrow = L, ncol = L, data = dat)
image(mat, asp=1, xaxt='n', yaxt='n', col = c("black", "grey"), ann=FALSE, bty='n')
legend(x=-.35, y=1, legend=c("Tree", "Sheep"), col = c("black", "grey"), pch=15, cex=1)
# calculate fraction
Rmat <- raster(mat)
(max(as.matrix(clump(Rmat, directions=4)), na.rm=T))/L^2
# params
p <- 1
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c(p, (1-p)))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
(max(as.matrix(clump(Rmat, directions=4)), na.rm=T))/L^2
Rmat <- raster(mat)
Rmat
# calculate fraction
Rmat <- raster(mat)
clump(Rmat, directions=4)
# params
p <- .9
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c(p, (1-p)))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
clump(Rmat, directions=4)
image(mat, asp=1, xaxt='n', yaxt='n', col = c("black", "grey"), ann=FALSE, bty='n')
legend(x=-.35, y=1, legend=c("Tree", "Sheep"), col = c("black", "grey"), pch=15, cex=1)
g  <- graph.adjacency(mat) %>% delete_edges("5|3")
library(igraph)
g  <- graph.adjacency(mat) %>% delete_edges("5|3")
g  <- graph.adjacency(mat)
g
plot(g)
clu <- components(g)
groups(clu)
groups(clu)
sum(groups(clu))
clu
clu$csize/(20*20)
clu
group(clu)
groups(clu)
groups(clu)$1
groups(clu)[1]
sum(groups(clu)[1])
vector(groups(clu))
g  <- graph.adjacency(mat)
g
decompose(mat)
decompose(g)
g  <- graph.adjacency(mat)
decompose(g)
install.packages("spm_bwlabel")
library("spm_bwlabel")
install.packages("spm_bwlabel")
#' }
#' @export
#' @importFrom neurobase nii.stub readnii
bwconncomp = function(infile, # input filename
outfile = NULL, # output filename
retimg = TRUE,
conn = 26,
reorient = FALSE,
spmdir = spm_dir(),
verbose = TRUE,
install_dir = NULL){
install_spm12(verbose = verbose,
install_dir = install_dir)
infile = checkimg(infile, gzipped = FALSE)
infile = path.expand(infile)
##################
# Checking on outfiles or return images
##################
if (retimg) {
if (is.null(outfile)) {
outfile = tempfile(fileext = ".nii")
}
} else {
stopifnot(!is.null(outfile))
}
outfile = path.expand(outfile)
if (grepl("\\.gz$", infile)) {
infile = R.utils::gunzip(infile,
remove = FALSE,
temporary = TRUE,
overwrite = TRUE)
} else {
infile = paste0(nii.stub(infile), ".nii")
}
stopifnot(file.exists(infile))
gzip_outfile = FALSE
if (grepl("\\.gz$", outfile)) {
gzip_outfile = TRUE
outfile = nii.stub(outfile)
outfile = paste0(outfile, ".nii")
}
cmd = ""
if (!is.null(spmdir)) {
spmdir = path.expand(spmdir)
cmd = paste(cmd, sprintf("addpath(genpath('%s'));", spmdir))
}
cmds = c(cmd,
sprintf("ROI = '%s'", infile),
sprintf("ROIf  = '%s'", outfile),
"%-Connected Component labelling",
"V = spm_vol(ROI);",
"dat = spm_read_vols(V);",
paste0("cc = bwconncomp(dat > 0, ", conn, ");"),
"dat = labelmatrix(cc);",
"%-Write new image",
"V.fname = ROIf;",
"V.private.cal = [0 1];",
"spm_write_vol(V,dat);")
sname = paste0(tempfile(), ".m")
writeLines(cmds, con = sname)
if (verbose) {
message(paste0("# Script is located at ", sname, "\n"))
}
res = run_matlab_script(sname)
if (gzip_outfile) {
R.utils::gzip(outfile, overwrite = TRUE, remove = TRUE)
outfile = paste0(nii.stub(outfile), ".nii.gz")
}
if (retimg) {
if (verbose) {
message(paste0("# Reading output file ", outfile, "\n"))
}
res = readnii(outfile, reorient = reorient)
} else {
res = outfile
}
return(res)
}
bwconncomp(mat)
library("spm12r")
install.packages("spm12r")
library("spm12r")
bwconncomp(mat)
spm_bwlabel(mat)
library(igraph)
library(raster)
induced.subgraph(g, which(cl$membership == which.max(cl$csize)))
cl <- clusters(g)
induced.subgraph(g, which(cl$membership == which.max(cl$csize)))
which.max(cl$csize)
adjecent(Rmat, directions=4)
install.packages("raster")
library(raster)
adjacent(Rmat, directions=4)
adjacent(Rmat, directions=4, cells = 1:L^2)
20^2
adjacent(Rmat, directions=4, cells = 1:L^2, pairs = F)
# params
p <- .1
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c(p, (1-p)))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
adjacent(Rmat, directions=4, cells = 1:L^2, pairs = F)
image(mat, asp=1, xaxt='n', yaxt='n', col = c("black", "grey"), ann=FALSE, bty='n')
legend(x=-.35, y=1, legend=c("Tree", "Sheep"), col = c("black", "grey"), pch=15, cex=1)
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
#turn the clumps into a list
tot <- max(Clumps, na.rm=TRUE)
res <- vector("list",tot)
for (i in 1:max(Clumps, na.rm=TRUE)){
res[i] <- list(which(Clumps == i, arr.ind = TRUE))
}
res
tot
# params
p <- .9
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c(p, (1-p)))
mat <- matrix(nrow = L, ncol = L, data = dat)
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
Clumps
image(mat, asp=1, xaxt='n', yaxt='n', col = c("black", "grey"), ann=FALSE, bty='n')
# params
p <- .9
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c((1-p), p))
mat <- matrix(nrow = L, ncol = L, data = dat)
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
#turn the clumps into a list
tot <- max(Clumps, na.rm=TRUE)
tot
Clumps
library(igraph)
library(raster)
# params
p <- seq(0, 1, length.out = 100)
N <- 3
# BEGIN FUNCTION ########################################################
forest <- function(N=N, p=p, L=L, frac=frac){
for(j in 1:N){
for(i in 1:length(p)){
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c((1-p[i]), p[i]))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
frac[i,j] <- (max(as.matrix(clump(Rmat, directions=4)), na.rm=T))/L^2
}
}
return(frac)
}
#### L=20
# prealocate matrix space
frac <- matrix(ncol = N, nrow = length(p))
# run function
v20 <- forest(N=N, p=p, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
plot(v20vec)
Clumps
image(mat, asp=1, xaxt='n', yaxt='n', col = c("black", "grey"), ann=FALSE, bty='n')
tot <- max(Clumps, na.rm=TRUE)
tot
res <- vector("list",tot)
res
#turn the clumps into a list
tot <- max(Clumps, na.rm=TRUE)
res <- vector("list",tot)
for (i in 1:max(Clumps, na.rm=TRUE)){
res[i] <- list(which(Clumps == i, arr.ind = TRUE))
}
res
sum(Clumps)
sum(Clumps, na.rm = T)
library(igraph)
library(raster)
# params
p <- seq(0, 1, length.out = 100)
N <- 3
# BEGIN FUNCTION ########################################################
forest <- function(N=N, p=p, L=L, frac=frac){
for(j in 1:N){
for(i in 1:length(p)){
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c((1-p[i]), p[i]))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
frac[i,j] <- sum(Clumps, na.rm = T)/L^2
}
}
return(frac)
}
#### L=20
# prealocate matrix space
frac <- matrix(ncol = N, nrow = length(p))
# run function
v20 <- forest(N=N, p=p, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
plot(v20vec)
# params
p <- .2
N <- 100
L <- 20
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c((1-p), p))
mat <- matrix(nrow = L, ncol = L, data = dat)
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
sum(Clumps, na.rm = T)
Clumps
length(Clumps, na.rm = T)
length(Clumps[!is.na(Clumps)])
library(igraph)
library(raster)
# params
p <- seq(0, 1, length.out = 100)
N <- 3
# BEGIN FUNCTION ########################################################
forest <- function(N=N, p=p, L=L, frac=frac){
for(j in 1:N){
for(i in 1:length(p)){
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c((1-p[i]), p[i]))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
frac[i,j] <- length(Clumps[!is.na(Clumps)])/L^2
}
}
return(frac)
}
#### L=20
# prealocate matrix space
frac <- matrix(ncol = N, nrow = length(p))
# run function
v20 <- forest(N=N, p=p, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
plot(v20vec)
Clumps
table(clumps)
table(Clumps)
max(table(Clumps))
# params
p <- seq(0, 1, length.out = 100)
N <- 3
# BEGIN FUNCTION ########################################################
forest <- function(N=N, p=p, L=L, frac=frac){
for(j in 1:N){
for(i in 1:length(p)){
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c((1-p[i]), p[i]))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
frac[i,j] <- max(table(Clumps))/L^2
}
}
return(frac)
}
#### L=20
# prealocate matrix space
frac <- matrix(ncol = N, nrow = length(p))
# run function
v20 <- forest(N=N, p=p, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
plot(v20vec)
# params
p <- seq(0, 1, length.out = 100)
N <- 50
# BEGIN FUNCTION ########################################################
forest <- function(N=N, p=p, L=L, frac=frac){
for(j in 1:N){
for(i in 1:length(p)){
# random data (1=tree or 0=sheep)
dat <- sample(0:1, L*L, replace=T, prob = c((1-p[i]), p[i]))
mat <- matrix(nrow = L, ncol = L, data = dat)
# calculate fraction
Rmat <- raster(mat)
Clumps <- as.matrix(clump(Rmat, directions=4))
frac[i,j] <- max(table(Clumps))/L^2
}
}
return(frac)
}
#### L=20
# prealocate matrix space
frac <- matrix(ncol = N, nrow = length(p))
# run function
v20 <- forest(N=N, p=p, L=20, frac=frac)
# creat vecotr of means
v20vec <- rowMeans(v20, na.rm=T)
plot(v20vec)
plot(v20vec)
#### L=50
# prealocate matrix space
frac1 <- matrix(ncol = N, nrow = length(p))
# run function
v50 <- forest(N=N, p=p, L=50, frac=frac1)
# creat vecotr of means
v50vec <- rowMeans(v50, na.rm=T)
#### L=100
# prealocate matrix space
frac2 <- matrix(ncol = N, nrow = length(p))
# run function
v100 <- forest(N=N, p=p, L=100, frac=frac2)
# creat vecotr of means
v100vec <- rowMeans(v100, na.rm=T)
#### L=200
# prealocate matrix space
frac3 <- matrix(ncol = N, nrow = length(p))
# run function
v200 <- forest(N=N, p=p, L=200, frac=frac3)
# creat vecotr of means
v200vec <- rowMeans(v200, na.rm=T)
setwd("~/Documents/GitHub/BurnhamPoCS/assignment6")
problem3DF <- data.frame(p, v20vec, v50vec, v100vec, v200vec)
problem3DF
write.csv(problem3DF, "problem3DF.csv")
problem3DF <- read.csv("problem3DF.csv", header=TRUE, stringsAsFactors=FALSE)
colors <- c("green", "red", "blue", "black")
matplot(y=problem3DF[,2:5], x=p, type = "l", xlab = "p",
ylab = "S_avg", lwd=3,
col=colors, ylim = c(0, .2),
lty=1, cex.lab = 1.3,
main="S_avg as a function of p for varying L")
matplot(y=problem3DF[,2:5], x=p, type = "l", xlab = "p",
ylab = "S_avg", lwd=3,
col=colors, ylim = c(0, 1),
lty=1, cex.lab = 1.3,
main="S_avg as a function of p for varying L")
grid()
legend(0.01, 0.8,
legend=c("L=20", "L=50", "L=100" ,"L=200"),
col=colors, lty=1, cex=.8)
abline(h=0.130231)
abline(v=0.59)
text("p_c = 0.59", x=0.4, y=0.8)
matplot(y=problem3DF[,2:5], x=p, type = "l", xlab = "p",
ylab = "S_avg", lwd=3,
col=colors, ylim = c(0, 1),
lty=1, cex.lab = 1.3,
main="S_avg as a function of p for varying L")
grid()
legend(0.01, 0.1,
legend=c("L=20", "L=50", "L=100" ,"L=200"),
col=colors, lty=1, cex=.8)
abline(v=0.59)
text("p_c = 0.59", x=0.4, y=1)
legend(0.01, 1,
legend=c("L=20", "L=50", "L=100" ,"L=200"),
col=colors, lty=1, cex=.8)
text("p_c = 0.59", x=0.4, y=.93)
colors <- c("green", "red", "blue", "black")
matplot(y=problem3DF[,2:5], x=p, type = "l", xlab = "p",
ylab = "S_avg", lwd=3,
col=colors, ylim = c(0, 1),
lty=1, cex.lab = 1.3,
main="S_avg as a function of p for varying L")
grid()
legend(0.01, 1,
legend=c("L=20", "L=50", "L=100" ,"L=200"),
col=colors, lty=1, cex=.8)
abline(v=0.59)
text("p_c = 0.59", x=0.4, y=.93)
setwd("~/Documents/GitHub/BurnhamPoCS/assignment6")
problem3DF <- read.csv("problem3DF.csv", header=TRUE, stringsAsFactors=FALSE)
colors <- c("green", "red", "blue", "black")
matplot(y=problem3DF[,2:5], x=p, type = "l", xlab = "p",
ylab = "S_avg", lwd=3,
col=colors, ylim = c(0, 1),
lty=1, cex.lab = 1.3,
main="S_avg as a function of p for varying L")
grid()
legend(0.01, 1,
legend=c("L=20", "L=50", "L=100" ,"L=200"),
col=colors, lty=1, cex=.8)
abline(v=0.59)
