eluteRNA <- 50
GITCperbee <- 200
cDNA_eff <- 0.1
rxn_vol <- 3
total_extr_vol<- 600
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$Quantity.Mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=data){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$Target.Name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$Sample.Name, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("Sample.Name", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("Sample.Name"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
CT_Threash <- function(data=data){
splitDF <- split(data, data$Target.Name)
# make norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$NormGenomeCopy[which(splitDF$DWV$Cq.Mean > 32.918)] <- 0
splitDF$BQCV$NormGenomeCopy[which(splitDF$BQCV$Cq.Mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Cq.Mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Cq.Mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
# running functions to clean data set:
OverwinteringQueens_Results <- PrelimClean(OverwinteringQueens_Results)
OverwinteringQueens_Results<- VirusNorm(number_bees = 1, OverwinteringQueens_Results)
OverwinteringQueens_Results<- actinNormal(OverwinteringQueens_Results)
OverwinteringQueens_Results<- CT_Threash(OverwinteringQueens_Results)
# split data set by virus
OWQ_split <- split(OverwinteringQueens_Results, OverwinteringQueens_Results$Target.Name)
# create BQCV data set
OWQ_BQCV <- OWQ_split$BQCV
# create DWV data set
OWQ_DWV <- OWQ_split$DWV
OWQ_BQCV
length(OWQ_BQCV$Sample.Name)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Required Packages
library("ggplot2")
library("dplyr")
library("plyr")
library("lme4")
library("car")
# read in data:
Bee_Data <- read.table("Bee_Data.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
OverwinteringQueens_Results <- read.table("OverwinteringQueens_Results.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
# merge data sets
OverwinteringQueens_Results <- merge(Bee_Data, OverwinteringQueens_Results, by=c("Sample.Name"), all.y=TRUE )
PrelimClean <- function(data=data){
# take only columns that we want:
data <- dplyr::select(data, Sample.Name, Target.Name, Cq.Mean, Cq.Standard.Deviation, Quantity.Mean, Treatment, Nosema, dil.factor)
# remove duplicate rows
data<-data[!duplicated(data),]
# remove NTC rows from dataframe:
data<-data[!(data$Sample.Name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$Sample.Name=="Gblock"),]
# remove Gblock rows from dataframe:
data<-data[!(data$Sample.Name=="gBlocks"),]
return(data)
}
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr<- 100
eluteRNA <- 50
GITCperbee <- 200
cDNA_eff <- 0.1
rxn_vol <- 3
total_extr_vol<- 600
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$Quantity.Mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=data){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$Target.Name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$Sample.Name, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("Sample.Name", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("Sample.Name"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
CT_Threash <- function(data=data){
splitDF <- split(data, data$Target.Name)
# make norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$NormGenomeCopy[which(splitDF$DWV$Cq.Mean > 32.918)] <- 0
splitDF$BQCV$NormGenomeCopy[which(splitDF$BQCV$Cq.Mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Cq.Mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Cq.Mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
# running functions to clean data set:
OverwinteringQueens_Results <- PrelimClean(OverwinteringQueens_Results)
OverwinteringQueens_Results<- VirusNorm(number_bees = 1, OverwinteringQueens_Results)
OverwinteringQueens_Results<- actinNormal(OverwinteringQueens_Results)
OverwinteringQueens_Results<- CT_Threash(OverwinteringQueens_Results)
# split data set by virus
OWQ_split <- split(OverwinteringQueens_Results, OverwinteringQueens_Results$Target.Name)
# create BQCV data set
OWQ_BQCV <- OWQ_split$BQCV
# create DWV data set
OWQ_DWV <- OWQ_split$DWV
OWQ_BQCV
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Required Packages
library("ggplot2")
library("dplyr")
library("plyr")
library("lme4")
library("car")
# read in data:
Bee_Data <- read.table("Bee_Data.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
OverwinteringQueens_Results <- read.table("OverwinteringQueens_Results.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
# merge data sets
OverwinteringQueens_Results <- merge(Bee_Data, OverwinteringQueens_Results, by=c("Sample.Name"), all.y=TRUE )
PrelimClean <- function(data=data){
# take only columns that we want:
data <- dplyr::select(data, Sample.Name, Target.Name, Cq.Mean, Quantity.Mean, Treatment, Nosema, dil.factor)
# remove duplicate rows
data<-data[!duplicated(data),]
# remove NTC rows from dataframe:
data<-data[!(data$Sample.Name=="No Sample"),]
# remove Gblock rows from dataframe:
data<-data[!(data$Sample.Name=="Gblock"),]
# remove Gblock rows from dataframe:
data<-data[!(data$Sample.Name=="gBlocks"),]
return(data)
}
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr<- 100
eluteRNA <- 50
GITCperbee <- 200
cDNA_eff <- 0.1
rxn_vol <- 3
total_extr_vol<- 600
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$Quantity.Mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=data){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$Target.Name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$Sample.Name, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("Sample.Name", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("Sample.Name"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
CT_Threash <- function(data=data){
splitDF <- split(data, data$Target.Name)
# make norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$NormGenomeCopy[which(splitDF$DWV$Cq.Mean > 32.918)] <- 0
splitDF$BQCV$NormGenomeCopy[which(splitDF$BQCV$Cq.Mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Cq.Mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Cq.Mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
# running functions to clean data set:
OverwinteringQueens_Results <- PrelimClean(OverwinteringQueens_Results)
OverwinteringQueens_Results<- VirusNorm(number_bees = 1, OverwinteringQueens_Results)
OverwinteringQueens_Results<- actinNormal(OverwinteringQueens_Results)
OverwinteringQueens_Results<- CT_Threash(OverwinteringQueens_Results)
# split data set by virus
OWQ_split <- split(OverwinteringQueens_Results, OverwinteringQueens_Results$Target.Name)
# create BQCV data set
OWQ_BQCV <- OWQ_split$BQCV
# create DWV data set
OWQ_DWV <- OWQ_split$DWV
OWQ_BQCV
write.csv(OWQ_split, "overwintering.csv")
write.csv(OverwinteringQueens_Results, "overwintering.csv")
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Required Packages
library("ggplot2")
library("dplyr")
library("plyr")
library("lme4")
library("car")
# read in data:
Bee_Data <- read.table("Bee_Data.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
OverwinteringQueens_Results <- read.table("OverwinteringQueens_Results.csv", header=TRUE, sep = ",", stringsAsFactors = FALSE)
# merge data sets
OverwinteringQueens_Results <- merge(Bee_Data, OverwinteringQueens_Results, by=c("Sample.Name"), all.y=TRUE )
table(OverwinteringQueens_Results$Sample.Name)
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo")
# Read in Data:
dat <- read.csv("PlantTransII.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Read in Data:
dat2 <- read.csv("PlantTransII_Exp2.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
dat <- merge(dat, dat2, by.x = c("ID"), all.x=TRUE)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- dplyr::select(data, ID, Cq_mean, target_name, quantity_mean, dil.factor, Colony, Treatment, time, exp)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="No Sample"),]
return(data)
}
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 400
eluteRNA <- 50
GITCperbee <- 600
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=MigVirus){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$ID, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("ID", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("ID"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
CT_Threash <- function(data=data){
splitDF <- split(data, data$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$NormGenomeCopy[which(splitDF$DWV$Cq_mean > 32.918)] <- 0
splitDF$BQCV$NormGenomeCopy[which(splitDF$BQCV$Cq_mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Cq_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Cq_mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV, splitDF$IAPV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
dat <- PrelimClean(data=dat)
dat <- VirusNorm(number_bees = 1, data=dat)
dat <- dat[which(dat$ID %in% c(3:200)),]
dat <- actinNormal(data=dat)
dat <- dat[dat$target_name=="DWV",]
dat1 <- dat[dat$exp==1,]
dat2 <- dat[dat$exp==2,]
plot(dat1$time, log10(dat1$NormGenomeCopy))
library(ggplot2)
ggplot(dat1, aes(x=time, y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)") + geom_smooth(se = TRUE, method = "gam", formula = y ~ s(log(x)))
plot(dat2$Treatment, log10(dat2$NormGenomeCopy))
dat2$logCop <- log10(dat2$NormGenomeCopy + 1)
# summary stats for plotting purposes:
dose <- ddply(dat2, c("Treatment"), summarise,
n = length(logCop),
mean = mean(logCop, na.rm = TRUE),
sd = sd(logCop, na.rm = TRUE),
se = sd / sqrt(n))
# remove NAs an reorder facotrs
dose <- dose[complete.cases(dose),]
dose$Treatment <- factor(dose$Treatment, levels = c(1,3,5,10))
#Create plot in ggplot
ggplot(dose, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x= "Dose (copies in milions)", y = "DWV Load log(genome copies)") + theme_classic(base_size = 17) + coord_cartesian(ylim = c(0, 8)) + theme(legend.position="none")
dat1
9^(1/3)
9^(-3)
9^(1/2)
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/BurnhamPoCS")
# set working Directory:
setwd("~/Documents/GitHub/BurnhamPoCS")
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/BurnhamPoCS")
# Read in Data:
rowing <- read.csv("assignment1_rowing.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# set working Directory:
setwd("~/Documents/GitHub/BurnhamPoCS")
# Read in Data:
rowing <- read.csv("assignment1_rowing.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
rowing
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/BurnhamPoCS")
# Read in Data:
rowing <- read.csv("assignment1_rowing.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
rowing
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/BurnhamPoCS")
# Read in Data:
rowing <- read.csv("assignment1_rowing.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
rowing
str(rowing)
rowing$Time/2000
installed.packages("lubridate")
library("lubridate")
install.packages("lubridate")
library("lubridate")
rowing$seconds <- parse_date_time(x = rowing$Time, c("HMS","MS"))
rowing$seconds
as.numeric(strptime(rowing$Time, format="%M:%S") - as.POSIXct(format(Sys.Date())), units="secs")
rowing$Time
60*7
420+24.5
rowing$seconds <- as.numeric(strptime(rowing$Time, format="%M:%S") - as.POSIXct(format(Sys.Date())), units="secs")
rowing$MperSec <- rowing$seconds/2000
rowing$MperSec
plot(rowing$MperSec, rowing$Class)
plot(rowing$Class, Rowing$MperSec)
plot(rowing$Class, rowing$MperSec)
rowing$MperSec <- 2000/rowing$seconds
plot(rowing$Class, rowing$MperSec)
plot(rowing$Class, rowing$MperSec, xlab="Number of Oarsman", ylab="speed (m/s)")
mod <- lm(rowing$MperSec~rowing$Class)
summary(mod)
abline(mod, col = "red")
1/9
# Read in Data:
weights <- read.csv("assigment1_weights.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
weights
split(weights, weights$Type)
# split by three classes
wightssplit <- split(weights, weights$Type)
# split by three classes
weightssplit <- split(weights, weights$Type)
# plot speed by number of oarsman
plot(weightssplit$cleanJerk$Weight, weightssplit$cleanJerk$BodyMass, xlab="Number of Oarsman", ylab="speed (m/s)", main = "Modern World Records for the 2000m by Class")
# plot speed by number of oarsman
plot(weightssplit$cleanJerk$BodyMass, weightssplit$cleanJerk$Weight, xlab="Number of Oarsman", ylab="speed (m/s)", main = "Modern World Records for the 2000m by Class")
# plot speed by number of oarsman
plot(weightssplit$cleanJerk$BodyMass, weightssplit$cleanJerk$Weight, xlab="Weight Class (kg)", ylab="Weight Lifted (kg)", main = "World Records for Clean & Jerk by Class")
mod1 <- lm(weightssplit$cleanJerk$Weight ~ weightssplit$cleanJerk$BodyMass)
# plot clean and jerk
plot(weightssplit$cleanJerk$BodyMass, weightssplit$cleanJerk$Weight, xlab="Weight Class (kg)", ylab="Weight Lifted (kg)", main = "World Records for Clean & Jerk by Class")
abline(mod1, col = "red")
# model for snatch
mod1 <- lm(weightssplit$snatch$Weight ~ weightssplit$snatch$BodyMass)
# model for snatch
mod2 <- lm(weightssplit$snatch$Weight ~ weightssplit$snatch$BodyMass)
# model for snatch
mod2 <- lm(weightssplit$snatch$Weight ~ weightssplit$snatch$BodyMass)
# plot Snatch
plot(weightssplit$snatch$BodyMass, weightssplit$snatch$Weight, xlab="Weight Class (kg)", ylab="Weight Lifted (kg)", main = "World Records for Clean & Jerk by Class")
abline(mod2, col = "blue")
par(mfrow=c(1,3))
# model for clean and jerk
mod1 <- lm(weightssplit$cleanJerk$Weight ~ weightssplit$cleanJerk$BodyMass)
# plot clean and jerk
plot(weightssplit$cleanJerk$BodyMass, weightssplit$cleanJerk$Weight, xlab="Weight Class (kg)", ylab="Weight Lifted (kg)", main = "World Records for Clean & Jerk by Class")
abline(mod1, col = "red")
# model for snatch
mod2 <- lm(weightssplit$snatch$Weight ~ weightssplit$snatch$BodyMass)
# plot Snatch
plot(weightssplit$snatch$BodyMass, weightssplit$snatch$Weight, xlab="Weight Class (kg)", ylab="Weight Lifted (kg)", main = "World Records for Snatch by Class")
abline(mod2, col = "blue")
# model for total
mod2 <- lm(weightssplit$Total$Weight ~ weightssplit$Total$BodyMass)
# plot total
plot(weightssplit$Total$BodyMass, weightssplit$Total$Weight, xlab="Weight Class (kg)", ylab="Weight Lifted (kg)", main = "World Records for Total by Class")
abline(mod2, col = "green")
par(mfrow=c(1,1))
mod1$coefficients
ls()
weightssplit$cleanJerk$Norm <- weightssplit$cleanJerk$Weight/1.625321
weightssplit$cleanJerk$Norm
plot(weightssplit$cleanJerk$Norm, weightssplit$cleanJerk$BodyMass)
plot(weightssplit$cleanJerk$BodyMass, weightssplit$cleanJerk$Norm)
summary(lm(weightssplit$cleanJerk$Norm~weightssplit$cleanJerk$BodyMass))
mod4 <- lm(weightssplit$cleanJerk$Norm~weightssplit$cleanJerk$BodyMass)
mod4$residuals
plot(mod4$residuals, weightssplit$cleanJerk$Norm)
plot(weightssplit$cleanJerk$Norm, mod4$residuals)
plot(weightssplit$cleanJerk$BodyMass, mod4$residuals)
weights$logMass <- log10(weights$BodyMass)
weights$logWeight <- log10(weights$Weight)
# split by three classes
weightssplit <- split(weights, weights$Type)
plot(mod3$residuals, weightssplit$Total$logWeight)
# model for total
mod3 <- lm(weightssplit$Total$logWeight ~ weightssplit$Total$logMass)
# plot total
plot(weightssplit$Total$logMass, weightssplit$Total$logWeight, xlab="log(Weight Class (kg))", ylab="log(Weight Lifted (kg))", main = "Record for Total")
abline(mod3, col = "green")
plot(mod3$residuals, weightssplit$Total$logWeight)
plot(weightssplit$Total$logWeight, mod3$residuals)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
abline(a=0)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
abline(b=0)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
abline(y=0)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
abline(x=0)
line(x=0)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
line(x=0)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
lines(x=0, y=0)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
lines(x=0, y=1)
abline(h=0)
plot(weightssplit$Total$logWeight, mod3$residuals, ylab = "Residuals", xlab = "log(Weight Class)")
abline(h=0, col="red")
1^0
1^1
3^1
3^0
