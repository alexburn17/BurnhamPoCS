round(runif(1, 1, xDim))),
ifelse(sum(j,temp2) %in% 1:yDim,
sum(j,temp2),
round(runif(1, 1, yDim)))] <- 2
}
}
# INFECTED honeybee colony rules
if(beeMatStatic[i,j] == 9){
if(runif(1, 1,100)<=probHBbirthINF){
beeMat[ifelse(sum(i,temp1) %in% 1:xDim,
sum(i,temp1),
round(runif(1, 1, xDim))),
ifelse(sum(j,temp2) %in% 1:yDim,
sum(j,temp2),
round(runif(1, 1, yDim)))] <- 6
}
}
# INFECTED bumble bee colony rules
if(beeMatStatic[i,j] == 10){
if(runif(1, 1,100)<=probBBbirthINF){
beeMat[ifelse(sum(i,temp1) %in% 1:xDim,
sum(i,temp1),
round(runif(1, 1, xDim))),
ifelse(sum(j,temp2) %in% 1:yDim,
sum(j,temp2),
round(runif(1, 1, yDim)))] <- 7
}
}
} # end j loop
} # end i loop
# create names for each png:
name <- rename(t)
png(name)
# create each image to visulaize as a matrix
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=cols, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
} # end of time step for loop
#run ImageMagick: creates a gif of all images
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
###### SET UP DATA SET AND VARS FOR CALCULATIONS: #######
MWm2 <- 25.5 # density of plants per 1 meter squared
plotArea <- 137088 # area of plot in meters squared
flowersSE <- 300 # number of plants sampled at each time step
eggCounts <- c(0,0,0,1,1,3,0) # vector of counts of eggs at each of 7 time steps
# calculate total number of flowers at BV:
flowersInPlot <- MWm2 * plotArea
# calculate the number of estimated eggs in plot for each time step:
totalEggsVec <- (eggCounts/flowersSE) * flowersInPlot
# sum them up for total eggs at BV so far:
sum(totalEggsVec)
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo")
# Paramters:
#----------------------------------------------------------------------------
TimeSteps <- 150 # number of time steps
xDim <- 50 # x dimension of matrix
yDim <- 50 # y dimension of matrix
probBirth <- 20 # bee birth rate
probDeath <- 5 # bee death rate
probDep <- 50 # probability of depositing virus on flower
probAquireInfected <- 100
probScen <- 5
probFlow <- 2
colsBees <- c("white", "yellow", "orange", "pink", "red")
# initialize random matrix with starting proportions of HB, BB individs:
beeVec <-sample(0:4, xDim*yDim, replace=T, prob = c(0.7, 0.14, 0.05, 0.1, 0.01))
beeMat <- matrix(data = beeVec, nrow = yDim, ncol = xDim)
# initialize random matrix with starting proportions of HB, BB colonies, and flowers:
colVec <-sample(0:6, xDim*yDim, replace=T, prob = c(0.85, 0.01, 0.01, 0.01, 0.01, 0.1, 0.01))
colMat <- matrix(data = colVec, nrow = yDim, ncol = xDim)
# function for creating file name with leading zeros
# makes it easier to process them sequentially
rename <- function(x){
if (x < 10) {
return(name <- paste('000',t,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',t,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', t,'plot.png', sep=''))
}
}
# initialize a matrix to store number of each state in matrix at each time step
counter <- matrix(nrow=TimeSteps, ncol=5)
counterCols <- matrix(nrow=TimeSteps, ncol=7)
# loop through time steps
for (t in 1:TimeSteps){
# store table of counts in each row of counter matrix
counter[t,] <- as.vector(table(beeMat))
counterCols[t,] <- as.vector(table(colMat))
# loop through each cell in the matrix
for (i in 1:xDim){
for (j in 1:yDim){
# create random unit movement steps for i and j
temp1 <- sample(c(1, -1), 1 ,replace=T, prob = c(0.5, 0.5))
temp2 <- sample(c(1, -1), 1 ,replace=T, prob = c(0.5, 0.5))
# Move the Bees:
if(beeMat[i,j]>=1){
a <- ifelse(sum(i,temp1) %in% 1:xDim, sum(i,temp1), round(runif(1, 1, xDim)))
b <- ifelse(sum(j,temp2) %in% 1:yDim, sum(j,temp2), round(runif(1, 1, yDim)))
if(beeMat[a, b]==0){
beeMat[a, b] <- beeMat[i,j]
beeMat[i,j] <- 0
}
}
# Kill the Bees:
if(beeMat[i,j]>=1){
if(runif(1, 1,100)<=probDeath){
beeMat[i,j] <- 0
}
}
# Make the Bees:
if(colMat[i,j]==1 || colMat[i,j]==2 || colMat[i,j]==3 || colMat[i,j]==4){
if(runif(1, 1,100)<=probBirth){
beeMat[i,j] <- colMat[i,j]
}
}
# Honey Bees Deposite Virus on flowers
if(beeMat[i,j]==3 & colMat[i,j]==5){
if(runif(1, 1,100)<=probDep){
colMat[i,j] <- 6
}
}
# Bumble Bees Pick up Virus
if(beeMat[i,j]==2 & colMat[i,j]==6){
if(runif(1, 1,100)<=probAquireInfected){
beeMat[i,j] <- 4
}
}
# Kill the Flowers:
if(colMat[i,j]>=5){
if(runif(1, 1,100)<=probScen){
colMat[i,j] <- 0
}
}
# Make the Flowers:
if(colMat[i,j]==0){
if(runif(1, 1,100)<=probFlow){
colMat[i,j] <- 5
}
}
} # end j loop
} # end i loop
# create names for each png:
name <- rename(t)
png(name)
# create each image to visulaize as a matrix
image(1:nrow(beeMat), 1:ncol(beeMat), as.matrix(beeMat), col=colsBees, asp=1, xaxt='n', yaxt='n', ann=FALSE, bty='n')
dev.off()
} # end of time step for loop
#run ImageMagick: creates a gif of all images
my_command <- 'convert *.png -delay 3 -loop 0 animation.gif'
system(my_command)
dev.off()
ResultMat <- cbind(counter[,2:5], counterCols[,6:7])
colors <- c("purple", "orange", "green", "red", "blue", "black")
matplot(y=ResultMat, type = "l", xlab = "Time",
ylab = "Frequency", lwd=3,
col=colors, ylim = c(0, 700),
lty=1, cex.lab = 1.3)
grid()
legend(0, 700,
legend=c("# S HB", "# S BB", "# I HB" ,"# I BB", "# S Flowers", "# I Flowers"),
col=colors, lty=1, cex=.8)
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo")
# Read in Data:
dat <- read.csv("PlantTransII.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Read in Data:
dat2 <- read.csv("PlantTransII_Exp2.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
dat <- merge(dat, dat2, by.x = c("ID"), all.x=TRUE)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- dplyr::select(data, ID, Cq_mean, target_name, quantity_mean, dil.factor, Colony, Treatment, time, exp)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="No Sample"),]
return(data)
}
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 400
eluteRNA <- 50
GITCperbee <- 600
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=MigVirus){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$ID, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("ID", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("ID"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
CT_Threash <- function(data=data){
splitDF <- split(data, data$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$NormGenomeCopy[which(splitDF$DWV$Cq_mean > 32.918)] <- 0
splitDF$BQCV$NormGenomeCopy[which(splitDF$BQCV$Cq_mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Cq_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Cq_mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV, splitDF$IAPV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
dat <- PrelimClean(data=dat)
dat <- VirusNorm(number_bees = 1, data=dat)
dat <- dat[which(dat$ID %in% c(3:200)),]
dat <- actinNormal(data=dat)
dat <- dat[dat$target_name=="DWV",]
dat1 <- dat[dat$exp==1,]
dat2 <- dat[dat$exp==2,]
plot(dat1$time, log10(dat1$NormGenomeCopy))
library(ggplot2)
ggplot(dat1, aes(x=time, y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)") + geom_smooth(se = TRUE, method = "gam", formula = y ~ s(log(x)))
plot(dat2$Treatment, log10(dat2$NormGenomeCopy))
dat2$logCop <- log10(dat2$NormGenomeCopy + 1)
# summary stats for plotting purposes:
dose <- ddply(dat2, c("Treatment"), summarise,
n = length(logCop),
mean = mean(logCop, na.rm = TRUE),
sd = sd(logCop, na.rm = TRUE),
se = sd / sqrt(n))
# remove NAs an reorder facotrs
dose <- dose[complete.cases(dose),]
dose$Treatment <- factor(dose$Treatment, levels = c(1,3,5,10))
#Create plot in ggplot
ggplot(dose, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x= "Dose (copies in milions)", y = "DWV Load log(genome copies)") + theme_classic(base_size = 17) + coord_cartesian(ylim = c(0, 8)) + theme(legend.position="none")
# remove NAs an reorder facotrs
dose <- dose[complete.cases(dose),]
# summary stats for plotting purposes:
dose <- ddply(dat2, c("Treatment"), summarise,
n = length(logCop),
mean = mean(logCop, na.rm = TRUE),
sd = sd(logCop, na.rm = TRUE),
se = sd / sqrt(n))
library(dplyr)
ggplot(dat1, aes(x=time, y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)") + geom_smooth(se = TRUE, method = "gam", formula = y ~ s(log(x)))
plot(dat2$Treatment, log10(dat2$NormGenomeCopy))
dat2$logCop <- log10(dat2$NormGenomeCopy + 1)
# summary stats for plotting purposes:
dose <- ddply(dat2, c("Treatment"), summarise,
n = length(logCop),
mean = mean(logCop, na.rm = TRUE),
sd = sd(logCop, na.rm = TRUE),
se = sd / sqrt(n))
library(plyr)
ggplot(dat1, aes(x=time, y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)") + geom_smooth(se = TRUE, method = "gam", formula = y ~ s(log(x)))
plot(dat2$Treatment, log10(dat2$NormGenomeCopy))
dat2$logCop <- log10(dat2$NormGenomeCopy + 1)
# summary stats for plotting purposes:
dose <- ddply(dat2, c("Treatment"), summarise,
n = length(logCop),
mean = mean(logCop, na.rm = TRUE),
sd = sd(logCop, na.rm = TRUE),
se = sd / sqrt(n))
# remove NAs an reorder facotrs
dose <- dose[complete.cases(dose),]
dose$Treatment <- factor(dose$Treatment, levels = c(1,3,5,10))
#Create plot in ggplot
ggplot(dose, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x= "Dose (copies in milions)", y = "DWV Load log(genome copies)") + theme_classic(base_size = 17) + coord_cartesian(ylim = c(0, 8)) + theme(legend.position="none")
dat <- dat[dat$target_name=="DWV",]
dat1 <- dat[dat$exp==1,]
dat2 <- dat[dat$exp==2,]
plot(dat1$time, log10(dat1$NormGenomeCopy))
library(ggplot2)
library(plyr)
ggplot(dat1, aes(x=time, y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)") + geom_smooth(se = TRUE, method = "gam", formula = y ~ s(log(x)))
plot(dat2$Treatment, log10(dat2$NormGenomeCopy))
dat2$logCop <- log10(dat2$NormGenomeCopy + 1)
# summary stats for plotting purposes:
dose <- ddply(dat2, c("Treatment"), summarise,
n = length(logCop),
mean = mean(logCop, na.rm = TRUE),
sd = sd(logCop, na.rm = TRUE),
se = sd / sqrt(n))
# remove NAs an reorder facotrs
dose <- dose[complete.cases(dose),]
dose$Treatment <- factor(dose$Treatment, levels = c(1,3,5,10))
#Create plot in ggplot
ggplot(dose, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x= "Dose (copies in milions)", y = "DWV Load log(genome copies)") + theme_classic(base_size = 17) + coord_cartesian(ylim = c(0, 8)) + theme(legend.position="none")
#Preliminaries:
# Clear memoxry of characters
ls()
rm(list=ls())
# set working Directory:
setwd("~/Documents/GitHub/Dissertation/PlantTransTwo")
# Read in Data:
dat <- read.csv("PlantTransII.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Read in Data:
dat2 <- read.csv("PlantTransII_Exp2.csv",
header=TRUE,
sep = ",",
stringsAsFactors = FALSE)
dat <- merge(dat, dat2, by.x = c("ID"), all.x=TRUE)
PrelimClean <- function(data=MigVirus){
# take only columns that we want:
library(dplyr)
data <- dplyr::select(data, ID, Cq_mean, target_name, quantity_mean, dil.factor, Colony, Treatment, time, exp)
# remove duplicate rows
data<-data[!duplicated(data), ]
# remove NTC rows from dataframe:
data<-data[!(data$ID=="No Sample"),]
return(data)
}
VirusNorm <- function(number_bees = 1, data=data){
# set constant values for genome copies per bee calculations:
crude_extr <- 400
eluteRNA <- 50
GITCperbee <- 600
cDNA_eff <- 0.1
rxn_vol <- 3
#create column for total_extr_vol
total_extr_vol <- (GITCperbee * number_bees)
# create column for genome copies per bee:
data$genomeCopy <- ((((((data$quantity_mean / cDNA_eff) / rxn_vol) * data$dil.factor) * eluteRNA) / crude_extr) * total_extr_vol) / number_bees
# norm_genomeCopy is 0 if NA
data$genomeCopy[is.na(data$genomeCopy)] <- 0
return(data)
}
actinNormal <- function(data=MigVirus){
# pull only actin values out of dataframe
ActinOnly <- data[which(data$target_name=="ACTIN"),]
# create DF of ACTIN genome copies and lab ID:
ActinDF <- data.frame(ActinOnly$ID, ActinOnly$genomeCopy)
colnames(ActinDF) <- c("ID", "ACT_genomeCopy")
# merge ACTIN dataframe with main dataframe:
#Need rownames and all.x=TRUE because data frames are different sizes.
data <- merge(data, ActinDF, by=c("ID"), all.x=TRUE)
# find mean of all ACTIN values:
ActinMean <- mean(ActinOnly$genomeCopy, na.rm = TRUE)
# create column for normalized genome copies per bee:
data$NormGenomeCopy <- (data$genomeCopy/data$ACT_genomeCopy)*ActinMean
return(data)
}
CT_Threash <- function(data=data){
splitDF <- split(data, data$target_name)
# make DWV norm_genome_copbee 0 if Ct value is > 32.918
splitDF$DWV$NormGenomeCopy[which(splitDF$DWV$Cq_mean > 32.918)] <- 0
splitDF$BQCV$NormGenomeCopy[which(splitDF$BQCV$Cq_mean > 32.525)] <- 0
splitDF$DWV$virusBINY  <- ifelse(splitDF$DWV$Cq_mean > 32.918, 0, 1)
splitDF$BQCV$virusBINY  <- ifelse(splitDF$BQCV$Cq_mean > 32.525, 0, 1)
# merge split dataframe back into "BombSurv" dataframe:
data <- rbind(splitDF$DWV, splitDF$BQCV, splitDF$IAPV)
# norm_genomeCopy is 0 if NA
data$virusBINY[is.na(data$virusBINY)] <- 0
return(data)
}
dat <- PrelimClean(data=dat)
dat <- VirusNorm(number_bees = 1, data=dat)
dat <- dat[which(dat$ID %in% c(3:200)),]
dat <- actinNormal(data=dat)
dat <- dat[dat$target_name=="DWV",]
dat1 <- dat[dat$exp==1,]
dat2 <- dat[dat$exp==2,]
plot(dat1$time, log10(dat1$NormGenomeCopy))
library(ggplot2)
library(plyr)
ggplot(dat1, aes(x=time, y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)") + geom_smooth(se = TRUE, method = "gam", formula = y ~ s(log(x)))
plot(dat2$Treatment, log10(dat2$NormGenomeCopy))
dat2$logCop <- log10(dat2$NormGenomeCopy + 1)
# summary stats for plotting purposes:
dose <- ddply(dat2, c("Treatment"), summarise,
n = length(logCop),
mean = mean(logCop, na.rm = TRUE),
sd = sd(logCop, na.rm = TRUE),
se = sd / sqrt(n))
# remove NAs an reorder facotrs
dose <- dose[complete.cases(dose),]
dose$Treatment <- factor(dose$Treatment, levels = c(1,3,5,10))
#Create plot in ggplot
ggplot(dose, aes(x=Treatment, y=mean, fill=Treatment)) +
geom_bar(stat="identity",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.4,
position=position_dodge(.9)) + labs(x= "Dose (copies in milions)", y = "DWV Load log(genome copies)") + theme_classic(base_size = 17) + coord_cartesian(ylim = c(0, 8)) + theme(legend.position="none")
ggplot(dat1, aes(x=log10(time), y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)") + geom_smooth(se = TRUE, method = "gam", formula = y ~ s(log(x)))
ggplot(dat1, aes(x=log10(time), y=log10(NormGenomeCopy+1))) +
geom_point(size=3) + theme_minimal(base_size = 17) + labs(x="Foraging Time (seconds)", y = "DWV Load log(genome copies)")
e^-1
3^-1
5^5
setwd("~/Documents/GitHub/BurnhamPoCS/assignment3")
# Read in Data:
words <- read.table("vocab_cs_mod.txt",
header=TRUE,
sep = " ",
stringsAsFactors = FALSE)
# Read in Data:
wordsFreq <- read.table("google_vocab_rawwordfreqs.txt",
header=TRUE,
sep = " ",
stringsAsFactors = FALSE)
myecdfOn <- function(x=words$X1) {1 - ecdf(x)(x)}
logN_k <- log10(myecdfOn(words$X30578667846))
logk <- log10(words$X30578667846)
df <- data.frame(logN_k, logk)
plot(y=df$logN_k, x=df$logk, ylab="log10(N_>k)", xlab="log10(k)", main="ccdf in log-log space")
# trim data set to show two scaling
dfTrim <- df[df$logk>5 & df$logk<10,]
dfTrimOne <- dfTrim[dfTrim$logk<7.4, ]
dfTrimTwo <- dfTrim[dfTrim$logk>7.4, ]
dfTrimTwo <- dfTrimTwo[-1,]
# linear regression of subsetted data
mod1 <- lm(dfTrimOne$logN_k~dfTrimOne$logk)
mod2 <- lm(dfTrimTwo$logN_k~dfTrimTwo$logk)
plot(y=dfTrim$logN_k, x=dfTrim$logk, ylab="log10(N_>k)", xlab="log10(k)", main = "Trimmed CCDF - Two Scaling Regimes")
abline(mod1, col = "red", lwd=3, lty="dashed")
abline(mod2, col = "blue", lwd=3, lty="dashed")
abline(v = 7.4, lwd=2, lty="dotted")
mod1$coefficients
confint(mod1, 'dfTrimOne$logk', level=0.95)
mod2$coefficients
confint(mod2, 'dfTrimTwo$logk', level=0.95)
x <- wordsFreq$X95119665584
n = 100000
random <- runif(n, 1, length(wordsFreq$X95119665584))
plot(y=log10(sort((wordsFreq$X95119665584[random]), decreasing = TRUE)),  x=(1:n), xlab = "Rank", ylab="log10(Word Frequency)", main = "Word Frequency by Rank")
text(x=80000, y=8, paste("n =", n, "words"))
ytrim <- log10(sort((wordsFreq$X95119665584[random]), decreasing = TRUE))
xtrim <- log10(1:n)
dfFour <- data.frame(xtrim, ytrim)
dfTrim2 <- dfFour[dfFour$xtrim>1.5,]
Lower <- dfTrim2[dfTrim2$xtrim>3.25, ]
Upper <- dfTrim2[dfTrim2$xtrim<3.25, ]
# linear regression of subsetted data
mod3 <- lm(Upper$ytrim~Upper$xtrim)
mod4 <- lm(Lower$ytrim~Lower$xtrim)
plot(y=dfTrim2$ytrim,  x=dfTrim2$xtrim, xlab = "log10(Rank)", ylab="log10(Word Frequency)", main = "Word Frequency by Rank Trimmed (log-log)")
abline(mod3, col = "red", lwd=3, lty="dashed")
abline(mod4, col = "blue", lwd=3, lty="dashed")
abline(v = 3.25, lwd=2, lty="dotted")
mod3$coefficients
confint(mod3, 'Upper$xtrim', level=0.95)
mod4$coefficients
confint(mod4, 'Lower$xtrim', level=0.95)
confint(mod1, 'dfTrimOne$logk', level=0.95)
confint(mod2, 'dfTrimTwo$logk', level=0.95)
confint(mod3, 'Upper$xtrim', level=0.95)
confint(mod4, 'Lower$xtrim', level=0.95)
confint(mod3, 'Upper$xtrim', level=0.95)
mod3$coefficients
mod4$coefficients
confint(mod4, 'Lower$xtrim', level=0.95)
gamma1 <- 1.6423224
gamma2 <- 2.099329
alpha1 <- 1.593627
alpha2 <- 1.391344
alpha1est <- 1/(1-gamma1)
alpha1est
alpha2est <- 1/(1-gamma2)
alpha2est
